1. VSC
Система контроля версий предназначена для удобного взаимодействия между несколькими разработчиками которые одновременно
пишут код. Git работает по принципу снимков проекта целяком , при этом файлы которые не были изменены - кешируются и подтягиваются из предыдущего снимка.
Базовая работа с git:
-git add filename - начинает отслеживать файл и включает его в следующую фиксацию
-git commit -m 'message' - сделать снимок проекта со всеми файлами которые в данный момент отслеживаются (git add)
-git push - отправить все коммиты которые есть на данный момент в удаленный репозиторий 

2. Git clone 
Команда которая позволяет скопировать файлы из удаленного репозитория локально на компьютер.
Синтаксис: git clone [url]

3. git config
Команда которая позволяет задать конфигурации git в рамках проекта. При выполнении этой команды изменяется файл 
.gitconfig

4. HEAD 
HEAD — это указатель на текущую ветку, которая, в свою очередь, является указателем на последний коммит, сделанный в этой ветке. 
Это значит, что HEAD будет родителем следующего созданного коммита. Как правило, самое простое считать HEAD снимком вашего последнего коммита.

5. Конфликты
Конфликты в git возникают в тех случаях когда два разработчика изменяют одни и те же строки в одном файле или когда
один разработчик удаляет файл , а другой его у себя как-то изменяет.
Типы конфликтов:
-При запуске слияния 
-В процессе слияния
Если конфликт возник при запуске слияния - это означает что проблема является локальной и не связана с другими разработчиками.
Если конфликт возникает в процессе слияния - это говорит о наличии конфликта между текущей локальной веткой и веткой с которой происходит слияние.
То есть другими словами это свидетельствует о конфликте с кодом другого разработчика. Git самостоятельно разрешает те конфликты которые может,
а остальные предоставляет разработчику что бы он решил их вручную.

6. Git status
Команда которая позволяет вывести текущий статус нашего репозитория. Показать какие файлы были добавлены , какие были изменены , 
какие в данный момент возникли ошибки.

7.git add
Команда которая позволяет сказать гиту какие файлы нужно отслеживать и включить в следующую фиксацию.

8. Staging area 
Область подготовленных файлов - обычный файл который хранится в каталоге git , который содержит информацию о тм что должно войти в следующий коммит.
Команда git add как раз таки добавляет файлы в staging area

9. fetch vs pull 
git fetch позволяет забрать актуальную информацию о коммитах из целевой ветки 
git pull - получает актуальные коммиты с сервера и отправляет текущие киммиты на сервер. То есть простыми словами 
это последовательность выполнения команд git fetch и git merge

10. Commit object

11. git stash 
Команда которая сохраняет текущие изменения в отдельное хранилище для того что бы к ним можно было вернуться позже.

12. merge vs rebase
merge - создает новый merge commit который содержит в себе все изменения которые были произведены в ветке после того как 
была от нее была создана новая ветка. Эта операция не разрушает историю каммитов.
rebase - стягивает все изменения в таком виде как буд-то ветка была создана только что. То есть эта операция изменяет 
историю коммитов. Удобно что в таком случае история коммитов не засоряется лишними merge коммитами. Не стоит использовать когда
над одной веткой работают сразу несколько разработчиков.
